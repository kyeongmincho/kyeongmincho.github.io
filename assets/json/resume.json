{"basics":{"name":"Kyeongmin Cho (조경민)","label":"Software Engineer","email":"kyeongmin.cho@rebellions.ai","url":"https://kyeongmincho.com","profiles":[{"network":"Twitter","username":"AlbertEinstein","url":"https://twitter.com/AlbertEinstein"}]},"education":[{"institution":"Korea Advanced Institute of Science and Technology (KAIST)","location":"Daejeon, Korea","url":"https://www.kaist.ac.kr/","studyType":[{"degree":"Ph.D.","major":"Computer Science"}],"startDate":"2019-09-02","endDate":"2024-08-16","advisor":{"name":"Jeehoon Kang","url":"https://cp.kaist.ac.kr/jeehoon.kang"},"dissertation":{"title":"Principles of Byte-Addressable Persistency","url":"https://kyeongmincho.com/assets/pdf/dissertation-screen.pdf"}},{"institution":"Inha University","location":"Incheon, Korea","url":"https://www.inha.ac.kr/","studyType":[{"degree":"B.S.","major":"Computer Science and Engineering"},{"degree":"B.A.","major":"Philosophy (double major)"}],"startDate":"2013-03-04","endDate":"2019-08-23"}],"work":[{"name":"Rebellions Inc.","position":"NPU Compiler Engineer","url":"https://rebellions.ai/","location":"Seongnam, Korea","startDate":"2024-09-03"},{"name":"Marketit Inc.","position":"Web App Developer","url":"https://marketit.asia/","location":"Seoul, Korea","startDate":"2016-07-28","endDate":"2017-08-25"},{"name":"Software Maestro, Ministry of Science and ICT","position":"Trainee","url":"https://www.swmaestro.org/sw/main/main.do","location":"Seoul, Korea","startDate":"2015-06-22","endDate":"2016-06-21"}],"publications":[{"name":"Quantum Probabilistic Model Checking for Time-Bounded Properties","authors":["seungmin.jeon","kyeongmin.cho","changu.kang","janggun.lee","hakjoo.oh","jeehoon.kang"],"publisher":"Object-oriented Programming, Systems, Languages, and Applications","acronym":"OOPSLA 2024","releaseDate":"2024-10-01","url":"https://doi.org/10.1145/3689731","abstract":"Probabilistic model checking (PMC) is a verification technique for analyzing the properties of probabilistic systems. However, existing techniques face challenges in verifying large systems with high accuracy. PMC struggles with <em>state explosion</em>, where the number of states grows exponentially with the size of the system, making large system verification infeasible. While statistical model checking (SMC) avoids PMC’s state explosion problem by using a simulation approach, it suffers from <em>runtime explosion</em>, requiring numerous samples for high accuracy. <br /> To address these limitations in verifying large systems with high accuracy, we present <em>quantum probabilistic model checking</em> (QPMC), the first method leveraging quantum computing for PMC with respect to time-bounded properties. QPMC addresses state explosion by encoding PMC problems into quantum circuits that <em>superpose</em> states within qubits. Additionally, QPMC resolves runtime explosion through Quantum Amplitude Estimation, efficiently estimating the probabilities of specified properties. We prove that QPMC correctly solves PMC problems and achieves a quadratic speedup in time complexity compared to SMC."},{"name":"Memento: A Framework for Detectable Recoverability in Persistent Memory","authors":["kyeongmin.cho","seungmin.jeon","azalea.raad","jeehoon.kang"],"publisher":"Programming Language Design and Implementation","acronym":"PLDI 2023","releaseDate":"2023-06-06","url":"https://doi.org/10.1145/3591232","abstract":"Persistent memory (PM) is an emerging class of storage technology that combines the performance of DRAM with the durability of SSD, offering the best of both worlds. This had led to a surge of research on persistent objects in PM. Among such persistent objects, concurrent data structures (DSs) are particularly interesting thanks to their performance and scalability. One of the most widely used correctness criteria for persistent concurrent DSs is <em>detectable recoverability</em>, ensuring both thread safety (for correctness in non-crashing concurrent executions) and crash consistency (for correctness in crashing executions). However, the existing approaches to designing detectably recoverable concurrent DSs are either limited to simple algorithms or suffer from high runtime overheads. <br /> We present Memento: a <em>general</em> and <em>high-performance</em> programming framework for detectably recoverable concurrent DSs in PM. To ensure general applicability to various DSs, Memento supports primitive operations such as checkpoint and compare-and-swap and their composition with control constructs. To ensure high performance, Memento employs a timestamp-based recovery strategy that requires fewer writes and flushes to PM than the existing approaches. We formally prove that Memento ensures detectable recoverability in the presence of crashes. To showcase Memento, we implement a lock-free stack, list, queue, and hash table, and a combining queue that detectably recovers from random crashes in stress tests and performs comparably to existing hand-tuned persistent DSs with and without detectable recoverability."},{"name":"Revamping Hardware Persistency Models: View-Based and Axiomatic Persistency Models for Intel-x86 and Armv8","authors":["kyeongmin.cho","sung-hwan.lee","azalea.raad","jeehoon.kang"],"publisher":"Programming Language Design and Implementation","acronym":"PLDI 2021","releaseDate":"2021-06-18","url":"https://doi.org/10.1145/3453483.3454027","abstract":"Non-volatile memory (NVM) is a cutting-edge storage technology that promises the performance of DRAM with the durability of SSD. Recent work has proposed several <em>persistency models</em> for mainstream architectures such as Intel-x86 and Armv8, describing the order in which writes are propagated to NVM. However, these models have several limitations; most notably, they either lack operational models or do not support persistent synchronization patterns. <br /> We close this gap by revamping the existing persistency models. First, inspired by the recent work on promising semantics, we propose a <em>unified operational style</em> for describing persistency using <em>views</em>, and develop view-based operational persistency models for Intel-x86 and Armv8, thus presenting the <em>first</em> operational model for Armv8 persistency. Next, we propose a <em>unified axiomatic style</em> for describing hardware persistency, allowing us to recast and repair the existing axiomatic models of Intel-x86 and Armv8 persistency. We prove that our axiomatic models are equivalent to the authoritative semantics reviewed by Intel and Arm engineers. We further prove that each axiomatic hardware persistency model is equivalent to its operational counterpart. Finally, we develop a persistent model checking algorithm and tool, and use it to verify several representative examples."}],"awards":[{"title":"NAVER Ph.D. Fellowship Award","date":"2021-12-05","awarder":"NAVER Corp."},{"title":"Best Award (1st place)","date":"2018-12-27","awarder":"Computer Science Capstone Design Competition, Inha University","summary":"Project: <em>A Framework for Fuzzing Android Applications</em>"},{"title":"Bronze Award (14th place)","date":"2014-11-08","awarder":"ACM International Collegiate Programming Contest (ICPC) Regional Contest, ACM"},{"title":"Kiwoom Securities Financial Scholarship","date":"2014-02-21","awarder":"Kiwoom Securities Corp."}],"certificates":[{"name":"日本語能力試験 (JLPT) 1級","date":"2009-08-28","issuer":"Japan Foundation","url":"https://www.jlpt.jp/","icon":"fa-solid fa-certificate"},{"name":"정보처리기사","date":"2020-08-28","issuer":"한국산업인력공단","url":"https://www.q-net.or.kr/crf005.do?id=crf00503&jmCd=1320","icon":"fa-solid fa-certificate"}],"languages":[{"language":"Korean","fluency":"Native speaker","icon":""},{"language":"English","fluency":"Professional working proficiency","icon":""},{"language":"Japanese","fluency":"Professional working proficiency","icon":""}]}